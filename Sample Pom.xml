#!/bin/bash

# Input files
FILE1="file1.xml"
FILE2="file2.xml"
OUTPUT_FILE="merged_file.xml"

# Extract properties from FILE2
properties=$(xmllint --xpath '//settings/profiles/profile/properties/*' "$FILE2" 2>/dev/null)

# Check if the properties extraction was successful
if [ -z "$properties" ]; then
    echo "No properties found in $FILE2"
    exit 1
fi

# Create a temporary file with the extracted properties
echo "$properties" > temp_properties.xml

# Insert the extracted properties into FILE1
sed -i '/<properties>/r temp_properties.xml' "$FILE1"

# Save the result to OUTPUT_FILE
cp "$FILE1" "$OUTPUT_FILE"

# Clean up temporary file
rm temp_properties.xml

echo "XML files have been successfully merged into $OUTPUT_FILE."




#!/bin/bash

# Input files
FILE1="file1.xml"
FILE2="file2.xml"
OUTPUT_FILE="merged_file.xml"

# Extract properties from FILE2
xmllint --xpath '//profile/properties' "$FILE2" > temp_properties.xml

# Remove the root element from the extracted properties
sed -i 's/<\/\?properties>//g' temp_properties.xml

# Insert the extracted properties into FILE1
sed -i '/<properties>/r temp_properties.xml' "$FILE1"

# Save the result to OUTPUT_FILE
cp "$FILE1" "$OUTPUT_FILE"

# Clean up temporary file
rm temp_properties.xml

echo "XML files have been successfully merged into $OUTPUT_FILE."









#!/bin/bash

# Input files
FILE1="file1.xml"
FILE2="file2.xml"
OUTPUT_FILE="merged_file.xml"

# Extract properties from FILE2
properties=$(xmlstarlet sel -t -c "//profile/properties" "$FILE2")

# Remove the root element from the extracted properties
properties=$(echo "$properties" | sed 's/<\/\?properties>//g')

# Create a temporary XML file with the new properties to be inserted
temp_file=$(mktemp)
echo "<root><properties>${properties}</properties></root>" > "$temp_file"

# Merge the properties into FILE1
xmlstarlet ed -L -s "/project/properties" -t elem -n temp -v "" \
  -r "//temp" -v "$(cat "$temp_file" | xmlstarlet sel -t -c "/root/properties" | sed 's/"/\\"/g')" "$FILE1"

# Save the result to OUTPUT_FILE
mv "$FILE1" "$OUTPUT_FILE"

# Clean up temporary file
rm "$temp_file"

echo "XML files have been successfully merged into $OUTPUT_FILE."





pipeline {
    agent any

    environment {
        BITBUCKET_URL = 'bitbucket.org/your-username/your-repo.git'
        BRANCH = 'main' // Change this to the branch you want to checkout
        SETTINGS_URL = 'http://example.com/path/to/settings.xml' // URL to your settings.xml file
        SETTINGS_FILE = 'settings.xml' // Local file name for the downloaded settings.xml
    }

    stages {
        stage('Checkout Code') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'your-credentials-id', usernameVariable: 'BITBUCKET_USERNAME', passwordVariable: 'BITBUCKET_PASSWORD')]) {
                    script {
                        sh '''
                        #!/bin/bash
                        echo "Cloning repository from Bitbucket..."
                        git clone -b $BRANCH https://$BITBUCKET_USERNAME:$BITBUCKET_PASSWORD@$BITBUCKET_URL
                        cd your-repo  # Change this to the name of your repository directory
                        '''
                    }
                }
            }
        }

        stage('Download Settings') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    echo "Downloading Maven settings.xml..."
                    curl -o $SETTINGS_FILE $SETTINGS_URL
                    '''
                }
            }
        }

        stage('Build with Maven') {
            steps {
                script {
                    sh '''
                    #!/bin/bash
                    echo "Building project with Maven..."
                    mvn clean install --settings $SETTINGS_FILE
                    '''
                }
            }
        }
        // Add more stages as needed
    }
}






--------------------------------------------------------------------
# dependencies.properties
spring.boot.version=2.6.6
guava.version=31.1-jre
log4j.version=2.17.1




<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <properties>
        <!-- Path to the external properties file -->
        <properties.file>${user.home}/config/dependencies.properties</properties.file>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <files>
                                <file>${properties.file}</file>
                            </files>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencyManagement>
        <dependencies>
            <!-- Import Spring Boot BOM with the version specified in the properties file -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- Dependencies that use versions defined in the properties file -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
</project>












Option2
===================================================


# external.properties
spring.boot.version=2.6.6
guava.version=31.1-jre
log4j.version=2.17.1



<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <profiles>
        <profile>
            <id>external-props</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <version>1.8</version>
                        <executions>
                            <execution>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <tasks>
                                        <property file="${user.home}/config/external.properties"/>
                                    </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <properties>
        <spring.boot.version>${spring.boot.version}</spring.boot.version>
        <guava.version>${guava.version}</guava.version>
        <log4j.version>${log4j.version}</log4j.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
    </dependencies>
</project>
